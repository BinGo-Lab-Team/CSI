// 2509062229-Main.qml Bakup

/*pragma ComponentBehavior: Bound
import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtMultimedia

ApplicationWindow {
    id: win
    visible: true
    width: 960
    height: 640
    title: qsTr("C S I")
    color: "transparent"
    flags: Qt.Window | Qt.FramelessWindowHint | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint

    readonly property bool maximized: visibility === Window.Maximized
    property int currentTab: 0   // 0=启动  1=设置

    MediaPlayer {
        id: startupPlayer
        source: "qrc:/res/audio/startup.wav"
        audioOutput: AudioOutput { id: out; volume: 1.0; muted: false }
        Component.onCompleted: Qt.callLater(play)
        onErrorOccurred: (e,s) => console.warn("[MediaPlayer] error:", e, s)
    }

    // ===== 背景与圆角 =====
    Rectangle {
        id: frame
        anchors.fill: parent
        radius: 12
        color: win.palette.window
        border.color: Qt.rgba(0,0,0,0.12)
        layer.enabled: true
        layer.smooth: true
        layer.samples: 8
        antialiasing: true
        clip: true
    }

    // ===== 顶部导航栏（含标题 + 选项 + 窗控） =====
    Rectangle {
        id: titleBar
        height: 52
        anchors.left: parent.left; anchors.right: parent.right; anchors.top: parent.top
        color: "transparent"

        readonly property string iconFont: (Qt.platform.os === "windows") ? "Segoe MDL2 Assets" : ""
        readonly property string glyphMin: (iconFont !== "") ? "" : "–"
        readonly property string glyphMax: (iconFont !== "") ? "" : "□"
        readonly property string glyphRes: (iconFont !== "") ? "" : "⬚"
        readonly property string glyphClose: (iconFont !== "") ? "" : "✕"
        readonly property int    iconPx: 14

        RowLayout {
            anchors.fill: parent
            anchors.leftMargin: 14
            anchors.rightMargin: 6
            spacing: 12

            // Title（要求 26px）
            Label {
                text: qsTr("CSI")
                font.pixelSize: 26
                font.weight: Font.DemiBold
                verticalAlignment: Text.AlignVCenter
            }

            // 导航选项
            RowLayout {
                spacing: 2
                // 启动
                ToolButton {
                    id: tabStart
                    checkable: true
                    checked: win.currentTab === 0
                    onClicked: win.currentTab = 0
                    background: Rectangle { color: "transparent" }
                    contentItem: Column {
                        spacing: 0
                        Label { text: qsTr("启动"); font.pixelSize: 15; color: tabStart.checked ? win.palette.highlight : win.palette.windowText }
                        Rectangle { height: 2; width: implicitWidth; color: tabStart.checked ? win.palette.highlight : "transparent" }
                    }
                }
                // 设置
                ToolButton {
                    id: tabSettings
                    checkable: true
                    checked: win.currentTab === 1
                    onClicked: win.currentTab = 1
                    background: Rectangle { color: "transparent" }
                    contentItem: Column {
                        spacing: 0
                        Label { text: qsTr("设置"); font.pixelSize: 15; color: tabSettings.checked ? win.palette.highlight : win.palette.windowText }
                        Rectangle { height: 2; width: implicitWidth; color: tabSettings.checked ? win.palette.highlight : "transparent" }
                    }
                }
            }

            Item { Layout.fillWidth: true }  // 占位，把窗口控制按钮推到最右侧

            // 最小化
            ToolButton {
                id: btnMin
                implicitWidth: 36; implicitHeight: 28
                onClicked: win.showMinimized()
                background: Rectangle { radius: 6; color: btnMin.hovered ? Qt.rgba(0,0,0,0.06) : "transparent" }
                contentItem: Label { text: titleBar.glyphMin; font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont; color: win.palette.windowText; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter }
            }
            // 最大化/还原
            ToolButton {
                id: btnMax
                implicitWidth: 36; implicitHeight: 28
                onClicked: win.maximized ? win.showNormal() : win.showMaximized()
                background: Rectangle { radius: 6; color: btnMax.hovered ? Qt.rgba(0,0,0,0.06) : "transparent" }
                contentItem: Label { text: win.maximized ? titleBar.glyphRes : titleBar.glyphMax; font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont; color: win.palette.windowText; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter }
            }
            // 关闭
            ToolButton {
                id: btnClose
                implicitWidth: 36; implicitHeight: 28
                onClicked: win.close()
                background: Rectangle { radius: 6; color: btnClose.hovered ? "#e5484d" : "transparent" }
                contentItem: Label { text: titleBar.glyphClose; font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont; color: btnClose.hovered ? "white" : win.palette.windowText; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter }
            }
        }

        DragHandler { target: null; onActiveChanged: if (active) win.startSystemMove() }
        TapHandler { gesturePolicy: TapHandler.DragThreshold; onDoubleTapped: win.maximized ? win.showNormal() : win.showMaximized() }
    }

    // ===== 内容区：根据导航切换不同页面（StartPage / SettingsPage） =====
    Loader {
        id: pageLoader
        anchors.left: parent.left; anchors.right: parent.right
        anchors.top: titleBar.bottom; anchors.bottom: parent.bottom
        source: win.currentTab === 0 ? "qrc:/res/qml/pages/StartPage.qml" : "qrc:/res/qml/pages/SettingsPage.qml"
    }

    // ===== 系统级缩放边缘 =====
    Rectangle { anchors.left: parent.left; anchors.right: parent.right; anchors.top: parent.top; height: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeVerCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge) } }
    Rectangle { anchors.left: parent.left; anchors.right: parent.right; anchors.bottom: parent.bottom; height: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeVerCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge) } }
    Rectangle { anchors.top: parent.top; anchors.bottom: parent.bottom; anchors.left: parent.left; width: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeHorCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.LeftEdge) } }
    Rectangle { anchors.top: parent.top; anchors.bottom: parent.bottom; anchors.right: parent.right; width: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeHorCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.RightEdge) } }

    Rectangle { x: 0; y: 0; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeFDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; y: 0; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeBDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.RightEdge) } }
    Rectangle { x: 0; anchors.bottom: parent.bottom; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeBDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; anchors.bottom: parent.bottom; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeFDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.RightEdge) } }
}*/