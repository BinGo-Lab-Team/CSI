pragma ComponentBehavior: Bound
import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtMultimedia

ApplicationWindow {
    id: win
    visible: true
    width: 960
    height: 640
    title: win.tr("csi.title", "CSI")
    color: "transparent"
    flags: Qt.Window | Qt.FramelessWindowHint

    // ===== 配置 =====
    readonly property bool maximized: visibility === Window.Maximized
    readonly property bool squareCorners: (visibility === Window.FullScreen) || (visibility === Window.Maximized)
    property int currentTab: 0
    property int cornerRadius: 12
    property int inset: 18

    readonly property int durFast: 80
    readonly property int durMed: 120
    readonly property int durSlow: 160
    readonly property int debounceMs: 200
    property double _lastToggleTS: 0
    function _now() { return Date.now() }
    function _debouncedToggleMaxRestore() {
        var t = _now();
        if (t - _lastToggleTS < debounceMs) return;
        _lastToggleTS = t;
        maximized ? win.showNormal() : win.showMaximized();
    }

    readonly property real dpr: Screen.devicePixelRatio
    readonly property int hit: Math.round(6 * dpr)
    readonly property int cornerHit: Math.round(10 * dpr)

    property bool enableStartupSound: true
    MediaPlayer {
        id: startupPlayer
        source: "qrc:/res/audio/startup.wav"
        audioOutput: AudioOutput { id: out; volume: 1.0; muted: false }
        Component.onCompleted: Qt.callLater(() => { if (win.enableStartupSound) play() })
        onErrorOccurred: (error, errorString) => {
            console.warn("[MediaPlayer] error:", error, errorString)
            win.enableStartupSound = false
        }
    }

    // 从 Theme 引入主题配色
    Theme { id: theme }

    property color menuGradTop: theme.menuGradTop
    property color menuGradMid: theme.menuGradMid
    property color menuGradBot: theme.menuGradBot
    property color menuTextColor: theme.menuTextColor
    property color hoverMask: theme.hoverMask
    readonly property color invertBase: menuTextColor

    function tr(id, fallback) {
        var s = qsTrId(id);
        return (s === id || s === "") ? fallback : s;
    }

    Shortcut { sequences: [ StandardKey.Close ]; onActivated: win.close() }
    Shortcut { sequences: [ "Alt+F10" ]; onActivated: win._debouncedToggleMaxRestore() }
    Shortcut { sequences: [ "F11" ]; onActivated: win.visibility = (win.visibility === Window.FullScreen) ? Window.AutomaticVisibility : Window.FullScreen }
    Shortcut { sequences: [ "Escape" ]; onActivated: if (win.visibility === Window.FullScreen) win.showNormal() }
    Shortcut { sequences: [ "Ctrl+1" ]; onActivated: win.currentTab = 0 }
    Shortcut { sequences: [ "Ctrl+2" ]; onActivated: win.currentTab = 1 }

    ShadowFrame {
        id: shell
        anchors.fill: parent
        inset: win.squareCorners ? 0 : win.inset
        cornerRadius: win.cornerRadius
        squareCorners: win.squareCorners
        frameColor: win.palette.window

        Rectangle {
            id: titleBar
            height: 56
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.top: parent.top
            radius: win.squareCorners ? 0 : win.cornerRadius
            gradient: Gradient {
                GradientStop { position: 0.0; color: win.menuGradTop }
                GradientStop { position: 0.5; color: win.menuGradMid }
                GradientStop { position: 1.0; color: win.menuGradBot }
            }

            // 自定义低调提示组件
            Component {
                id: subtleTip
                Rectangle {
                    id: tipRoot
                    radius: 6
                    color: "#f2f2f2"
                    border.color: "#dddddd"
                    border.width: 1
                    opacity: 0.0
                    Behavior on opacity { NumberAnimation { duration: 120 } }
                    width: Math.max(56, txt.implicitWidth + 12)
                    height: txt.implicitHeight + 8
                    Text {
                        id: txt
                        anchors.centerIn: parent
                        text: tipRoot.tipText
                        font.pixelSize: 11
                        color: "#555"
                    }
                    property string tipText: ""
                }
            }

            Rectangle {
                id: bottomCover
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.bottom: parent.bottom
                height: win.squareCorners ? 0 : win.cornerRadius
                color: win.menuGradBot
                Behavior on height { NumberAnimation { duration: win.durMed; easing.type: Easing.OutCubic } }
            }

            readonly property string iconMin: "qrc:/res/icon/window/min.svg"
            readonly property string iconMax: "qrc:/res/icon/window/max.svg"
            readonly property string iconRes: "qrc:/res/icon/window/restore.svg"
            readonly property string iconClose: "qrc:/res/icon/window/close.svg"

            Label {
                text: win.tr("csi.title", "CSI")
                anchors.left: parent.left
                anchors.leftMargin: 14
                anchors.verticalCenter: parent.verticalCenter
                color: win.menuTextColor
                font.pixelSize: 26
                font.weight: Font.DemiBold
            }

            Row {
                id: navCenter
                spacing: 10
                anchors.verticalCenter: parent.verticalCenter
                anchors.horizontalCenter: parent.horizontalCenter

                ToolButton {
                    id: tabStart
                    text: win.tr("csi.tab.start", "启动")
                    checkable: true
                    checked: win.currentTab === 0
                    padding: 10
                    implicitHeight: 36
                    implicitWidth: Math.max(88, contentItem.implicitWidth + 20)
                    onClicked: win.currentTab = 0
                    scale: pressed ? 0.98 : 1.0
                    Behavior on scale { NumberAnimation { duration: win.durFast; easing.type: Easing.OutCubic } }
                    background: Rectangle { radius: 8; color: tabStart.checked ? win.invertBase : (tabStart.hovered ? win.hoverMask : "transparent") }
                    contentItem: Label { text: tabStart.text; font.pixelSize: 15; color: tabStart.checked ? win.menuGradTop : win.menuTextColor; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter }
                    Accessible.name: tabStart.text
                    Accessible.role: Accessible.Button
                    Timer {
                        id: tipTimerStart
                        interval: 1000; repeat: false
                        onTriggered: tipLoaderStart.item.opacity = 0.96
                    }
                    Loader {
                        id: tipLoaderStart
                        anchors.top: parent.bottom; anchors.topMargin: 6
                        anchors.horizontalCenter: parent.horizontalCenter
                        active: tabStart.hovered
                        sourceComponent: subtleTip
                        onLoaded: { item.tipText = tabStart.text; item.opacity = 0.0; if (tabStart.hovered) tipTimerStart.start() }
                        onActiveChanged: if (!active) { tipTimerStart.stop(); if (item) item.opacity = 0.0 }
                    }
                }

                ToolButton {
                    id: tabSettings
                    text: win.tr("csi.tab.settings", "设置")
                    checkable: true
                    checked: win.currentTab === 1
                    padding: 10
                    implicitHeight: 36
                    implicitWidth: Math.max(88, contentItem.implicitWidth + 20)
                    onClicked: win.currentTab = 1
                    scale: pressed ? 0.98 : 1.0
                    Behavior on scale { NumberAnimation { duration: win.durFast; easing.type: Easing.OutCubic } }
                    background: Rectangle { radius: 8; color: tabSettings.checked ? win.invertBase : (tabSettings.hovered ? win.hoverMask : "transparent") }
                    contentItem: Label { text: tabSettings.text; font.pixelSize: 15; color: tabSettings.checked ? win.menuGradTop : win.menuTextColor; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter }
                    Accessible.name: tabSettings.text
                    Accessible.role: Accessible.Button
                    Timer {
                        id: tipTimerSettings
                        interval: 1000; repeat: false
                        onTriggered: tipLoaderSettings.item.opacity = 0.96
                    }
                    Loader {
                        id: tipLoaderSettings
                        anchors.top: parent.bottom; anchors.topMargin: 6
                        anchors.horizontalCenter: parent.horizontalCenter
                        active: tabSettings.hovered
                        sourceComponent: subtleTip
                        onLoaded: { item.tipText = tabSettings.text; item.opacity = 0.0; if (tabSettings.hovered) tipTimerSettings.start() }
                        onActiveChanged: if (!active) { tipTimerSettings.stop(); if (item) item.opacity = 0.0 }
                    }
                }
            }

            Row {
                spacing: 6
                anchors.right: parent.right
                anchors.rightMargin: 6
                anchors.verticalCenter: parent.verticalCenter

                ToolButton {
                    id: btnMin
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win.showMinimized()
                    background: Rectangle { radius: 6; color: btnMin.hovered ? win.hoverMask : "transparent" }
                    contentItem: Image { source: titleBar.iconMin; fillMode: Image.PreserveAspectFit; anchors.centerIn: parent; width: 14; height: 14 }
                    Accessible.name: win.tr("csi.window.minimize", "最小化")
                    Accessible.role: Accessible.Button
                    Timer { id: tipTimerMin; interval: 1000; repeat: false; onTriggered: tipLoaderMin.item.opacity = 0.96 }
                    Loader {
                        id: tipLoaderMin
                        anchors.top: parent.bottom; anchors.topMargin: 6
                        anchors.horizontalCenter: parent.horizontalCenter
                        active: btnMin.hovered
                        sourceComponent: subtleTip
                        onLoaded: { item.tipText = win.tr("csi.window.minimize","最小化"); item.opacity = 0.0; if (btnMin.hovered) tipTimerMin.start() }
                        onActiveChanged: if (!active) { tipTimerMin.stop(); if (item) item.opacity = 0.0 }
                    }
                }
                ToolButton {
                    id: btnMax
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win._debouncedToggleMaxRestore()
                    background: Rectangle { radius: 6; color: btnMax.hovered ? win.hoverMask : "transparent" }
                    contentItem: Image { source: win.maximized ? titleBar.iconRes : titleBar.iconMax; fillMode: Image.PreserveAspectFit; anchors.centerIn: parent; width: 14; height: 14 }
                    Accessible.name: win.maximized ? win.tr("csi.window.restore", "还原") : win.tr("csi.window.maximize", "最大化")
                    Accessible.role: Accessible.Button
                    Timer { id: tipTimerMax; interval: 1000; repeat: false; onTriggered: tipLoaderMax.item.opacity = 0.96 }
                    Loader {
                        id: tipLoaderMax
                        anchors.top: parent.bottom; anchors.topMargin: 6
                        anchors.horizontalCenter: parent.horizontalCenter
                        active: btnMax.hovered
                        sourceComponent: subtleTip
                        onLoaded: { item.tipText = win.maximized ? win.tr("csi.window.restore","还原") : win.tr("csi.window.maximize","最大化"); item.opacity = 0.0; if (btnMax.hovered) tipTimerMax.start() }
                        onActiveChanged: if (!active) { tipTimerMax.stop(); if (item) item.opacity = 0.0 }
                    }
                }
                ToolButton {
                    id: btnClose
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win.close()
                    background: Rectangle { radius: 6; color: btnClose.hovered ? "#e5484d" : "transparent" }
                    contentItem: Image { source: titleBar.iconClose; fillMode: Image.PreserveAspectFit; anchors.centerIn: parent; width: 14; height: 14 }
                    Accessible.name: win.tr("csi.window.close", "关闭")
                    Accessible.role: Accessible.Button
                    Timer { id: tipTimerClose; interval: 1000; repeat: false; onTriggered: tipLoaderClose.item.opacity = 0.96 }
                    Loader {
                        id: tipLoaderClose
                        anchors.top: parent.bottom; anchors.topMargin: 6
                        anchors.horizontalCenter: parent.horizontalCenter
                        active: btnClose.hovered
                        sourceComponent: subtleTip
                        onLoaded: { item.tipText = win.tr("csi.window.close","关闭"); item.opacity = 0.0; if (btnClose.hovered) tipTimerClose.start() }
                        onActiveChanged: if (!active) { tipTimerClose.stop(); if (item) item.opacity = 0.0 }
                    }
                }
            }

            DragHandler { target: null; onActiveChanged: if (active) win.startSystemMove() }
            TapHandler  { gesturePolicy: TapHandler.DragThreshold; onDoubleTapped: win._debouncedToggleMaxRestore() }
        }

        StackLayout {
            id: stack
            anchors.left: parent.left; anchors.right: parent.right
            anchors.top: titleBar.bottom; anchors.bottom: parent.bottom
            currentIndex: win.currentTab

            Loader {
                id: startPage
                source: "qrc:/res/qml/pages/StartPage.qml"
                asynchronous: true
                active: stack.currentIndex === 0
            }
            Loader {
                id: settingsPage
                source: "qrc:/res/qml/pages/SettingsPage.qml"
                asynchronous: true
                active: stack.currentIndex === 1
            }
        }
    }

    // 边缘与角缩放保持原逻辑...
    Rectangle { anchors { left: parent.left; right: parent.right; top: parent.top } height: win.hit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeVerCursor } DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge) } }
    Rectangle { anchors { left: parent.left; right: parent.right; bottom: parent.bottom } height: win.hit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeVerCursor } DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge) } }
    Rectangle { anchors { top: parent.top; bottom: parent.bottom; left: parent.left } width: win.hit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeHorCursor } DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.LeftEdge) } }
    Rectangle { anchors { top: parent.top; bottom: parent.bottom; right: parent.right } width: win.hit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeHorCursor } DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.RightEdge) } }

    Rectangle { x: 0; y: 0; width: win.cornerHit; height: win.cornerHit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeFDiagCursor } DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; y: 0; width: win.cornerHit; height: win.cornerHit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeBDiagCursor } DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.RightEdge) } }
    Rectangle { x: 0; anchors.bottom: parent.bottom; width: win.cornerHit; height: win.cornerHit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeBDiagCursor } DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; anchors.bottom: parent.bottom; width: win.cornerHit; height: win.cornerHit; color: "transparent"; visible: !win.squareCorners; HoverHandler { cursorShape: Qt.SizeFDiagCursor } DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.RightEdge) } }
}
