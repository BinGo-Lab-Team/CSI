pragma ComponentBehavior: Bound
import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtMultimedia

ApplicationWindow {
    id: win
    visible: true
    width: 960
    height: 640
    title: qsTr("C S I")
    color: "transparent"
    flags: Qt.Window | Qt.FramelessWindowHint | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint

    readonly property bool maximized: visibility === Window.Maximized
    property int currentTab: 0        // 0=启动, 1=设置
    property int cornerRadius: 12

    // 菜单条主题（渐变三色 + 文本色 + 悬停遮罩）
    property color menuGradTop: "#1769ff"
    property color menuGradMid: "#3b8cff"
    property color menuGradBot: "#6fb1ff"
    property color menuTextColor: "white"
    property color hoverMask: Qt.rgba(0,0,0,0.12)

    // 反色的“底色”（选中时按钮底）
    readonly property color invertBase: menuTextColor

    // 启动音效
    MediaPlayer {
        id: startupPlayer
        source: "qrc:/res/audio/startup.wav"
        audioOutput: AudioOutput { id: out; volume: 1.0; muted: false }
        Component.onCompleted: Qt.callLater(play)
        onErrorOccurred: (e,s) => console.warn("[MediaPlayer] error:", e, s)
    }

    // ===== 背景与圆角（沿用旧法：Rectangle + clip）=====
    Rectangle {
        id: frame
        anchors.fill: parent
        radius: win.cornerRadius
        color: win.palette.window
        border.color: Qt.rgba(0,0,0,0.12)
        layer.enabled: true
        layer.smooth: true
        layer.samples: 8
        antialiasing: true
        clip: true

        // ===== 顶部导航栏（渐变蓝条 + 居中页签 + 窗控）=====
        Rectangle {
            id: titleBar
            height: 56
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.top: parent.top

            // 上两角跟窗口，底边直角由补齐条负责
            radius: win.cornerRadius
            antialiasing: true
            layer.enabled: true
            layer.smooth: true
            layer.samples: 8

            // 全彩但不密集的竖向渐变
            gradient: Gradient {
                GradientStop { position: 0.0; color: win.menuGradTop }
                GradientStop { position: 0.5; color: win.menuGradMid }
                GradientStop { position: 1.0; color: win.menuGradBot }
            }

            // 把下边两角“拉直”的补齐条：用渐变底端颜色避免断层
            Rectangle {
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.bottom: parent.bottom
                height: win.cornerRadius
                color: win.menuGradBot
            }

            // MDL2 字体与符号
            readonly property string iconFont: (Qt.platform.os === "windows") ? "Segoe MDL2 Assets" : ""
            readonly property string glyphMin: (iconFont !== "") ? "\uE921" : "\u2013"
            readonly property string glyphMax: (iconFont !== "") ? "\uE922" : "\u25A1"
            readonly property string glyphRes: (iconFont !== "") ? "\uE923" : "\u2B1A"
            readonly property string glyphClose: (iconFont !== "") ? "\uE8BB" : "\u2715"
            readonly property int    iconPx: 14

            // 左侧标题
            Label {
                text: qsTr("CSI")
                anchors.left: parent.left
                anchors.leftMargin: 14
                anchors.verticalCenter: parent.verticalCenter
                color: win.menuTextColor
                font.pixelSize: 26
                font.weight: Font.DemiBold
            }

            // 中间页签（整体居中）
            Row {
                id: navCenter
                spacing: 10
                anchors.verticalCenter: parent.verticalCenter
                anchors.horizontalCenter: parent.horizontalCenter

                // ===== 启动 =====
                ToolButton {
                    id: tabStart
                    text: qsTr("启动")
                    checkable: true
                    checked: win.currentTab === 0
                    onClicked: win.currentTab = 0
                    padding: 10
                    implicitHeight: 36
                    implicitWidth: Math.max(88, contentItem.implicitWidth + 20)

                    // 轻微按压动画
                    scale: pressed ? 0.98 : 1.0
                    Behavior on scale { NumberAnimation { duration: 80; easing.type: Easing.OutCubic } }

                    background: Rectangle {
                        radius: 8
                        color: tabStart.checked
                               ? win.invertBase
                               : (tabStart.hovered ? win.hoverMask : "transparent")
                        Behavior on color { ColorAnimation { duration: 180; easing.type: Easing.OutCubic } }
                    }
                    contentItem: Label {
                        text: tabStart.text
                        font.pixelSize: 15
                        color: tabStart.checked ? win.menuGradTop : win.menuTextColor
                        horizontalAlignment: Text.AlignHCenter
                        verticalAlignment: Text.AlignVCenter
                        Behavior on color { ColorAnimation { duration: 180; easing.type: Easing.OutCubic } }
                    }
                }

                // ===== 设置 =====
                ToolButton {
                    id: tabSettings
                    text: qsTr("设置")
                    checkable: true
                    checked: win.currentTab === 1
                    onClicked: win.currentTab = 1
                    padding: 10
                    implicitHeight: 36
                    implicitWidth: Math.max(88, contentItem.implicitWidth + 20)

                    scale: pressed ? 0.98 : 1.0
                    Behavior on scale { NumberAnimation { duration: 80; easing.type: Easing.OutCubic } }

                    background: Rectangle {
                        radius: 8
                        color: tabSettings.checked
                               ? win.invertBase
                               : (tabSettings.hovered ? win.hoverMask : "transparent")
                        Behavior on color { ColorAnimation { duration: 180; easing.type: Easing.OutCubic } }
                    }
                    contentItem: Label {
                        text: tabSettings.text
                        font.pixelSize: 15
                        color: tabSettings.checked ? win.menuGradTop : win.menuTextColor
                        horizontalAlignment: Text.AlignHCenter
                        verticalAlignment: Text.AlignVCenter
                        Behavior on color { ColorAnimation { duration: 180; easing.type: Easing.OutCubic } }
                    }
                }
            }

            // 右侧窗控
            Row {
                spacing: 6
                anchors.right: parent.right
                anchors.rightMargin: 6
                anchors.verticalCenter: parent.verticalCenter

                ToolButton {
                    id: btnMin
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win.showMinimized()
                    background: Rectangle { radius: 6; color: btnMin.hovered ? win.hoverMask : "transparent" }
                    contentItem: Label {
                        text: titleBar.glyphMin; font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont
                        color: win.menuTextColor; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter
                        Behavior on color { ColorAnimation { duration: 120 } }
                    }
                }
                ToolButton {
                    id: btnMax
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win.maximized ? win.showNormal() : win.showMaximized()
                    background: Rectangle { radius: 6; color: btnMax.hovered ? win.hoverMask : "transparent" }
                    contentItem: Label {
                        text: win.maximized ? titleBar.glyphRes : titleBar.glyphMax
                        font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont
                        color: win.menuTextColor; horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter
                        Behavior on color { ColorAnimation { duration: 120 } }
                    }
                }
                ToolButton {
                    id: btnClose
                    implicitWidth: 36; implicitHeight: 28
                    onClicked: win.close()
                    background: Rectangle { radius: 6; color: btnClose.hovered ? "#e5484d" : "transparent" }
                    contentItem: Label {
                        text: titleBar.glyphClose; font.pixelSize: titleBar.iconPx; font.family: titleBar.iconFont
                        color: btnClose.hovered ? "white" : win.menuTextColor
                        horizontalAlignment: Text.AlignHCenter; verticalAlignment: Text.AlignVCenter
                        Behavior on color { ColorAnimation { duration: 120 } }
                    }
                }
            }

            // 拖拽/双击最大化
            DragHandler { target: null; onActiveChanged: if (active) win.startSystemMove() }
            TapHandler  { gesturePolicy: TapHandler.DragThreshold; onDoubleTapped: win.maximized ? win.showNormal() : win.showMaximized() }
        }

        // ===== 内容区：根据导航加载页面 =====
        Loader {
            id: pageLoader
            anchors.left: parent.left; anchors.right: parent.right
            anchors.top: titleBar.bottom; anchors.bottom: parent.bottom
            source: win.currentTab === 0
                    ? "qrc:/res/qml/pages/StartPage.qml"
                    : "qrc:/res/qml/pages/SettingsPage.qml"
        }
    }

    // ===== 系统级缩放边缘（在最外层 win 上）=====
    Rectangle { anchors.left: parent.left; anchors.right: parent.right; anchors.top: parent.top; height: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeVerCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge) } }
    Rectangle { anchors.left: parent.left; anchors.right: parent.right; anchors.bottom: parent.bottom; height: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeVerCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge) } }
    Rectangle { anchors.top: parent.top; anchors.bottom: parent.bottom; anchors.left: parent.left; width: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeHorCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.LeftEdge) } }
    Rectangle { anchors.top: parent.top; anchors.bottom: parent.bottom; anchors.right: parent.right; width: 6; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeHorCursor }
        DragHandler { target: null; grabPermissions: PointerHandler.CanTakeOverFromAnything; onActiveChanged: if (active) win.startSystemResize(Qt.RightEdge) } }

    Rectangle { x: 0; y: 0; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeFDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; y: 0; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeBDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.TopEdge | Qt.RightEdge) } }
    Rectangle { x: 0; anchors.bottom: parent.bottom; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeBDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.LeftEdge) } }
    Rectangle { anchors.right: parent.right; anchors.bottom: parent.bottom; width: 10; height: 10; color: "transparent"
        HoverHandler { cursorShape: Qt.SizeFDiagCursor }
        DragHandler { target: null; onActiveChanged: if (active) win.startSystemResize(Qt.BottomEdge | Qt.RightEdge) } }
}
